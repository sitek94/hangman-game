{"version":3,"sources":["components/folk.js","components/you-missed.js","components/letter.js","components/letters.js","components/layout.js","components/modal.js","app.js","hooks/use-random-word.js","index.js"],"names":["folkParts","FolkContainer","children","className","Folk","visiblePartsCount","visibleParts","slice","data-testid","map","part","YouMissed","missedLetters","join","Letter","disabled","clsx","Letters","word","guessedLetters","wordLetters","padStart","MAX_WORD_LENGTH","split","letter","i","includes","Layout","Modal","title","description","buttonText","onButtonClick","noButton","onClick","App","React","isFirstGame","setIsFirstGame","usedLetters","setUsedLetters","setWord","status","setStatus","fetchRandomWord","a","fetch","method","headers","process","response","json","fetchedWord","toUpperCase","randomWord","useRandomWord","filter","l","isGameOver","length","isGameWon","every","isLoading","isError","isSuccess","handleKeyDown","key","test","concat","window","addEventListener","removeEventListener","startNewGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1998f1ca.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport './folk.scss';\r\n\r\n// Folk's parts are in the order that they are rendered\r\n// during the game.\r\nconst folkParts = [\r\n  'head',\r\n  'neck',\r\n  'corpus',\r\n  'arm arm--right',\r\n  'arm arm--left',\r\n  'hand hand--right',\r\n  'hand hand--left',\r\n  'leg leg--right',\r\n  'leg leg--left',\r\n  'foot foot--right',\r\n  'foot foot--left',\r\n];\r\n\r\nfunction Folk({ visiblePartsCount }) {\r\n  const visibleParts = folkParts.slice(0, visiblePartsCount);\r\n\r\n  return (\r\n    <FolkContainer>\r\n      <div className=\"folk\" data-testid=\"folk\">\r\n        {visibleParts.map((part) => (\r\n          <div key={part} className={part} />\r\n        ))}\r\n      </div>\r\n    </FolkContainer>\r\n  );\r\n}\r\n\r\nFolk.propTypes = {\r\n  visiblePartsCount: PropTypes.number.isRequired,\r\n};\r\n\r\n// Wraps the folk and adds the bar so it's easier to position it\r\nfunction FolkContainer({ children }) {\r\n  return (\r\n    <div className=\"folk-container\">\r\n      <div className=\"bar bar--horizontal\" />\r\n      <div className=\"bar bar--vertical\" />\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Folk;\r\n","import PropTypes from 'prop-types';\r\nimport './you-missed.scss';\r\n\r\nfunction YouMissed({ missedLetters }) {\r\n  return (\r\n    <div className=\"you-missed\">\r\n      <div className=\"title\">You missed:</div>\r\n      <div className=\"missed-letters\">{missedLetters.join(' ')}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nYouMissed.propTypes = {\r\n  missedLetters: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default YouMissed;\r\n","import PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport './letter.scss';\r\n\r\nfunction Letter({ disabled, children }) {\r\n  return (\r\n    <div className={clsx('letter', disabled && 'disabled')}>{children}</div>\r\n  );\r\n}\r\n\r\nLetter.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Letter;\r\n","import PropTypes from 'prop-types';\r\nimport Letter from 'components/letter';\r\nimport { MAX_WORD_LENGTH } from 'app';\r\nimport './letters.scss';\r\n\r\nfunction Letters({ word, guessedLetters }) {\r\n  const wordLetters = word\r\n    // Pad the word when its length is less than max length\r\n    .padStart(MAX_WORD_LENGTH)\r\n    .split('');\r\n\r\n  return (\r\n    <div className=\"letters\">\r\n      {wordLetters.map((letter, i) => (\r\n        <Letter key={i} disabled={letter === ' '}>\r\n          {guessedLetters.includes(letter) || letter === '-' ? letter : null}\r\n        </Letter>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nLetters.propTypes = {\r\n  guessedLetters: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  word: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Letters;\r\n","import './layout.scss';\r\n\r\nfunction Layout({ children }) {\r\n  return (\r\n    <div className=\"layout\">\r\n      <div className=\"container\">{children}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;","import PropTypes from 'prop-types';\r\nimport './modal.scss';\r\n\r\nfunction Modal({ title, description, buttonText, onButtonClick, noButton }) {\r\n  return (\r\n    <div className=\"modal\">\r\n      <h1 className=\"title\">{title}</h1>\r\n      {description && <p className=\"description\">{description}</p>}\r\n      {!noButton && (\r\n        <button className=\"button\" onClick={onButtonClick}>\r\n          {buttonText}\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nModal.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string,\r\n  buttonText: PropTypes.string,\r\n  onButtonClick: PropTypes.func,\r\n  noButton: PropTypes.bool,\r\n};\r\n\r\nexport default Modal;\r\n","import * as React from 'react';\r\n\r\nimport Folk from 'components/folk';\r\nimport YouMissed from 'components/you-missed';\r\nimport Letters from 'components/letters';\r\nimport Layout from 'components/layout';\r\nimport Modal from 'components/modal';\r\nimport { useRandomWord } from 'hooks/use-random-word';\r\n\r\nexport const MAX_WORD_LENGTH = 11;\r\nexport const MAX_MISSED_LETTERS = 11;\r\n\r\nfunction App() {\r\n  const [isFirstGame, setIsFirstGame] = React.useState(true);\r\n  const [usedLetters, setUsedLetters] = React.useState([]);\r\n  const { randomWord, status, fetchRandomWord } = useRandomWord();\r\n\r\n  const missedLetters = usedLetters.filter((l) => !randomWord.includes(l));\r\n  const guessedLetters = usedLetters.filter((l) => randomWord.includes(l));\r\n\r\n  // Game is lost when player user reached steps limit\r\n  const isGameOver = missedLetters.length === MAX_MISSED_LETTERS;\r\n\r\n  // Game is won when each letter of the random word can be found\r\n  // among the guessed letters\r\n  const isGameWon = randomWord\r\n    .split('')\r\n    .every((l) => guessedLetters.includes(l));\r\n\r\n  // Fetch status\r\n  const isLoading = status === 'pending';\r\n  const isError = status === 'rejected';\r\n  const isSuccess = status === 'resolved';\r\n\r\n  // Add/remove key down event listener\r\n  React.useEffect(() => {\r\n    const handleKeyDown = ({ key }) => {\r\n      // If pressed key is not alphabetical or has been used already do nothing\r\n      if (!/^[a-z]$/i.test(key) || usedLetters.includes(key.toUpperCase())) {\r\n        return;\r\n      }\r\n      // If one of the screens `initial`, `game-won`, `game-over`, `loading`, \r\n      //`error` is shown do nothing\r\n      if (isFirstGame || isGameWon || isGameOver || isLoading || isError) {\r\n        return;\r\n      }\r\n\r\n      setUsedLetters(usedLetters.concat(key.toUpperCase()));\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [usedLetters, isFirstGame, isGameWon, isGameOver, isLoading, isError]);\r\n\r\n  // When random word is too long fetches new one\r\n  React.useEffect(() => {\r\n    if (randomWord.length > MAX_WORD_LENGTH) {\r\n      fetchRandomWord();\r\n    }\r\n  }, [randomWord, fetchRandomWord]);\r\n\r\n  // Fetches new word and resets the used letters\r\n  const startNewGame = () => {\r\n    setUsedLetters([]);\r\n    fetchRandomWord();\r\n  };\r\n\r\n  // Starts the first game\r\n  const startFirstGame = () => {\r\n    setIsFirstGame(false);\r\n  };\r\n\r\n  // Initial game screen\r\n  if (isFirstGame) {\r\n    return (\r\n      <Layout>\r\n        <Modal\r\n          title=\"Netguru Hangman\"\r\n          description={`This is a simple Hangman game, have fun and good luck!`}\r\n          buttonText=\"Start game\"\r\n          onButtonClick={startFirstGame}\r\n        />\r\n        <Folk visiblePartsCount={11} />\r\n        <YouMissed\r\n          missedLetters={['B', 'D', 'E', 'Z', 'P', 'U', 'K', 'L', 'Q', 'W']}\r\n        />\r\n        <Letters word=\"HANGMAN\" guessedLetters={['H', 'A']} />\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  // When the word is too long, before new one is fetched use empty string \r\n  // to so that <Letters> is semi-transparent\r\n  const word = randomWord.length > MAX_WORD_LENGTH ? '' : randomWord;\r\n\r\n  // After the initial game\r\n  return (\r\n    <Layout>\r\n      {/* Loading screen */}\r\n      {isLoading && <Modal title=\"Loading...\" noButton />}\r\n\r\n      {/* Error screen */}\r\n      {isError && (\r\n        <Modal\r\n          title=\"Ooops :(\"\r\n          description=\"Something went wrong, try refreshing the page.\"\r\n          noButton\r\n        />\r\n      )}\r\n\r\n      {/* Game over screen */}\r\n      {isGameOver && isSuccess && (\r\n        <Modal\r\n          title=\"Game over\"\r\n          buttonText=\"New word\"\r\n          onButtonClick={startNewGame}\r\n        />\r\n      )}\r\n\r\n      {/* Game won screen */}\r\n      {isGameWon && isSuccess && (\r\n        <Modal\r\n          title=\"You won!\"\r\n          buttonText=\"Again\"\r\n          description={`Congratulations, you missed ${missedLetters.length} letters.`}\r\n          onButtonClick={startNewGame}\r\n        />\r\n      )}\r\n\r\n      <Folk visiblePartsCount={missedLetters.length} />\r\n      <YouMissed missedLetters={missedLetters} />\r\n      <Letters word={word} guessedLetters={guessedLetters} />\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import * as React from 'react';\r\n\r\nexport function useRandomWord() {\r\n  const [word, setWord] = React.useState('');\r\n  const [status, setStatus] = React.useState('idle');\r\n\r\n  // Fetches random world from WordsAPI\r\n  const fetchRandomWord = React.useCallback(async () => {\r\n    setStatus('pending');\r\n\r\n    try {\r\n      const response = await fetch(\r\n        `https://wordsapiv1.p.rapidapi.com/words/?random=true`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            'x-rapidapi-key': process.env.REACT_APP_RAPIDAPI_KEY,\r\n            'x-rapidapi-host': process.env.REACT_APP_RAPIDAPI_HOST,\r\n          },\r\n        }\r\n      );\r\n\r\n      const { word: fetchedWord } = await response.json();\r\n\r\n      setStatus('resolved');\r\n      setWord(fetchedWord.toUpperCase());\r\n    } catch (e) {\r\n      setStatus('rejected');\r\n\r\n      // console.log(e.message);\r\n    }\r\n  }, []);\r\n\r\n  // Initial fetch\r\n  React.useEffect(() => {\r\n    fetchRandomWord();\r\n  }, [fetchRandomWord]);\r\n\r\n  return { status, randomWord: word, fetchRandomWord };\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'app';\nimport 'fonts/fonts.scss';\nimport 'index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}