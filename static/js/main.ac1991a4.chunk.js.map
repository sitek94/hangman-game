{"version":3,"sources":["utils/get-env.ts","config/index.ts","constants/content.ts","api/words.ts","components/Folk/Folk.tsx","components/Layout/Layout.tsx","components/LetterTiles/LetterTile/LetterTile.tsx","components/LetterTiles/LetterTiles.tsx","constants/game.ts","components/Modal/Modal.tsx","components/YouMissed/YouMissed.tsx","components/App/App.tsx","hooks/use-random-word.ts","index.tsx","mocks/server-handlers.ts","mocks/dev-worker.ts"],"names":["getEnv","name","value","process","Error","wordsApi","key","host","url","githubProfileUrl","isDevelopment","index","isMSWEnabled","Boolean","getBoolEnv","pathname","URL","pkg","homepage","project","repoUrl","screens","start","title","description","button","word","missedLetters","guessedLetters","gameWon","n","gameLost","loading","error","getRandomWord","a","params","URLSearchParams","random","limit","lettersMax","String","MAX_WORD_LENGTH","fetch","method","headers","response","json","folkParts","FolkContainer","children","className","Folk","visiblePartsCount","visibleParts","slice","map","part","Layout","LetterTile","inactive","clsx","LetterTiles","wordLetters","padStart","split","letter","i","includes","Modal","buttonText","onButtonClick","noButton","onClick","YouMissed","join","App","React","isFirstGame","setIsFirstGame","usedLetters","setUsedLetters","setWord","status","setStatus","fetchRandomWord","fetchedWord","toUpperCase","console","randomWord","isIdle","isPending","isResolved","isRejected","useRandomWord","filter","l","isGameOver","length","isGameWon","every","handleKeyDown","test","concat","window","addEventListener","removeEventListener","startNewGame","location","require","worker","quiet","serviceWorker","ReactDOM","render","StrictMode","document","getElementById","main","words","serverHandlers","rest","get","req","res","ctx","searchParams","message","setupWorker"],"mappings":"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","file":"static/js/main.ac1991a4.chunk.js","sourcesContent":["/**\n * Simple helper and type guard to check if the ENV variable is actually defined\n */\nexport const getEnv = (name: string): string => {\n  const value = process.env[name];\n\n  if (!value) {\n    throw new Error(`Missing ENV variable: \"${name}\"`);\n  }\n\n  return value;\n};\n\nexport const getBoolEnv = (name: string): boolean => {\n  const value = getEnv(name);\n\n  if (value !== 'true' && value !== 'false') {\n    throw new Error(`\"${name}\" ENV variable has to be a boolean`);\n  }\n\n  return Boolean(value);\n};\n","import { getBoolEnv, getEnv } from 'utils/get-env';\n\nimport pkg from '../../package.json';\n\nconst index = process.env.NODE_ENV;\n\nexport const wordsApi = {\n  key: getEnv('REACT_APP_WORDS_API_KEY'),\n  host: getEnv('REACT_APP_WORDS_API_HOST'),\n  url: getEnv('REACT_APP_WORDS_API_URL'),\n};\n\nexport const githubProfileUrl = getEnv('REACT_APP_MY_PROFILE_URL');\n\nexport const isProduction = index === 'production';\nexport const isDevelopment = index === 'development';\nexport const isTest = index === 'test';\n\nexport const isMSWEnabled = getBoolEnv('REACT_APP_ENABLE_MSW');\n\nconst { pathname } = new URL(pkg.homepage);\n\nexport const project = {\n  name: pkg.name,\n  repoUrl: githubProfileUrl + '/' + pkg.name,\n  pathname,\n};\n","export const screens = {\n  start: {\n    title: 'Netguru Hangman',\n    description: 'This is a simple Hangman game, have fun and good luck!',\n    button: 'Start game',\n    word: 'HANGMAN',\n    missedLetters: ['B', 'D', 'E', 'Z', 'P', 'U', 'K', 'L', 'Q', 'W'],\n    guessedLetters: ['H', 'A'],\n  },\n  gameWon: {\n    title: 'You won!',\n    description: (n: number) => `Congratulations, you missed ${n} letters.`,\n    button: 'Play again',\n  },\n  gameLost: {\n    title: 'Game over',\n    description: '',\n    button: 'Try again',\n  },\n  loading: {\n    title: 'Loading...',\n  },\n  error: {\n    title: 'Oops',\n    description: 'Something went wrong, try refreshing the page.',\n  },\n};\n","import { wordsApi } from 'config';\n\nimport { MAX_WORD_LENGTH } from 'constants/game';\n\n/**\n * Get random word\n *\n * https://rapidapi.com/dpventures/api/wordsapi\n */\nexport async function getRandomWord() {\n  const params = new URLSearchParams({\n    // üèÜ The lead character of the show\n    random: 'true',\n    // By default Words API returns a bunch of results which are not needed\n    limit: '1',\n    // Words API doesn't count space as a character, so we need to take that\n    // into account\n    lettersMax: String(MAX_WORD_LENGTH - 1),\n  });\n\n  const response = await fetch(wordsApi.url + '/?' + params, {\n    method: 'GET',\n    headers: {\n      'x-rapidapi-key': wordsApi.key,\n      'x-rapidapi-host': wordsApi.host,\n    },\n  });\n  const { word } = await response.json();\n  if (typeof word === 'string') {\n    return word;\n  }\n  throw new Error(`‚ò†Ô∏è There something's wrong with the \"word\"`);\n}\n","import './Folk.scss';\n\nimport * as React from 'react';\n\n// Folk's parts are in the order that they are rendered\n// during the game.\nconst folkParts = [\n  'head',\n  'neck',\n  'corpus',\n  'arm arm--right',\n  'arm arm--left',\n  'hand hand--right',\n  'hand hand--left',\n  'leg leg--right',\n  'leg leg--left',\n  'foot foot--right',\n  'foot foot--left',\n];\n\ninterface FolkProps {\n  visiblePartsCount: number;\n}\n\nfunction Folk({ visiblePartsCount }: FolkProps) {\n  const visibleParts = folkParts.slice(0, visiblePartsCount);\n\n  return (\n    <FolkContainer>\n      <div className=\"folk\" data-testid=\"folk\">\n        {visibleParts.map(part => (\n          <div key={part} className={part} />\n        ))}\n      </div>\n    </FolkContainer>\n  );\n}\n\n/**\n * Wraps the folk and adds the bar so it's easier to position it\n */\nfunction FolkContainer({ children }: { children: React.ReactElement }) {\n  return (\n    <div className=\"folk-container\">\n      <div className=\"bar bar--horizontal\" />\n      <div className=\"bar bar--vertical\" />\n      {children}\n    </div>\n  );\n}\n\nexport default Folk;\n","import './Layout.scss';\n\nimport * as React from 'react';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nfunction Layout({ children }: LayoutProps) {\n  return (\n    <div data-testid=\"layout\" className=\"layout\">\n      <div className=\"container\">{children}</div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import './LetterTile.scss';\n\nimport * as React from 'react';\nimport clsx from 'clsx';\n\ninterface LetterProps {\n  inactive?: boolean;\n  children: React.ReactNode;\n}\n\nfunction LetterTile({ inactive, children }: LetterProps) {\n  return (\n    <div\n      aria-label={inactive ? 'Inactive letter tile' : 'Active letter tile'}\n      data-testid=\"letter-tile\"\n      className={clsx('letter-tile', inactive && 'inactive')}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default LetterTile;\n","import './LetterTiles.scss';\n\nimport { MAX_WORD_LENGTH } from 'constants/game';\n\nimport LetterTile from './LetterTile';\n\ninterface LettersProps {\n  word: string;\n  guessedLetters: string[];\n}\n\nfunction LetterTiles({ word, guessedLetters }: LettersProps) {\n  const wordLetters = word\n    // Pad the word when its length is less than max length\n    .padStart(MAX_WORD_LENGTH)\n    .split('');\n\n  return (\n    <div className=\"letter-tiles\" data-testid=\"letter-tiles\">\n      {wordLetters.map((letter, i) => (\n        <LetterTile key={i} inactive={letter === ' '}>\n          {guessedLetters.includes(letter) || letter === '-' ? letter : null}\n        </LetterTile>\n      ))}\n    </div>\n  );\n}\n\nexport default LetterTiles;\n","/**\n * How long the word can be. It determines how many letter tiles we're going to\n * show.\n */\nexport const MAX_WORD_LENGTH = 11;\n\n/**\n * After how many tries the game is lost (it's basically the number of\n * folk's parts.\n */\nexport const MAX_MISSED_LETTERS = 11;\n","import './Modal.scss';\n\ninterface CommonModalProps {\n  title: string;\n  description?: string;\n}\n\ntype ButtonModalProps =\n  | {\n      noButton?: never;\n      buttonText: string;\n      onButtonClick: () => void;\n    }\n  | {\n      noButton: true;\n      buttonText?: never;\n      onButtonClick?: never;\n    };\n\ntype ModalProps = CommonModalProps & ButtonModalProps;\n\nfunction Modal({\n  title,\n  description,\n  buttonText,\n  onButtonClick,\n  noButton,\n}: ModalProps) {\n  return (\n    <div className=\"modal\">\n      <h1 className=\"title\">{title}</h1>\n      {description && <p className=\"description\">{description}</p>}\n      {!noButton && (\n        <button className=\"button\" onClick={onButtonClick}>\n          {buttonText}\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default Modal;\n","import './YouMissed.scss';\n\ninterface YouMissedProps {\n  missedLetters: string[];\n}\n\nfunction YouMissed({ missedLetters }: YouMissedProps) {\n  return (\n    <div className=\"you-missed\">\n      <div className=\"title\">You missed:</div>\n      <div data-testid=\"missed-letters\" className=\"missed-letters\">\n        {missedLetters.join(' ')}\n      </div>\n    </div>\n  );\n}\n\nexport default YouMissed;\n","import * as React from 'react';\n\nimport { screens } from 'constants/content';\nimport { MAX_MISSED_LETTERS } from 'constants/game';\nimport { useRandomWord } from 'hooks/use-random-word';\nimport Folk from 'components/Folk';\nimport Layout from 'components/Layout';\nimport LetterTiles from 'components/LetterTiles';\nimport Modal from 'components/Modal';\nimport YouMissed from 'components/YouMissed';\n\nfunction App() {\n  const [isFirstGame, setIsFirstGame] = React.useState(true);\n  const [usedLetters, setUsedLetters] = React.useState<string[]>([]);\n  const { randomWord, fetchRandomWord, isPending, isResolved, isRejected } =\n    useRandomWord();\n\n  const missedLetters = usedLetters.filter(l => !randomWord.includes(l));\n  const guessedLetters = usedLetters.filter(l => randomWord.includes(l));\n\n  // Game is lost when player user reached steps limit\n  const isGameOver = missedLetters.length === MAX_MISSED_LETTERS;\n\n  // Game is won when each letter of the random word can be found\n  // among the guessed letters\n  const isGameWon = randomWord.split('').every(l => guessedLetters.includes(l));\n\n  // Add/remove key down event listener\n  React.useEffect(() => {\n    const handleKeyDown = ({ key }: KeyboardEvent) => {\n      // Pressed key is not alphabetical\n      if (!/^[a-z]$/i.test(key)) {\n        return;\n      }\n\n      // Pressed key been used already\n      if (usedLetters.includes(key.toUpperCase())) {\n        return;\n      }\n\n      // One of the screens `initial`, `game-won`, `game-over`, `loading`,\n      // `error` is shown\n      if (isFirstGame || isGameWon || isGameOver || isPending || isRejected) {\n        return;\n      }\n\n      setUsedLetters(usedLetters.concat(key.toUpperCase()));\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [usedLetters, isFirstGame, isGameWon, isGameOver, isPending, isRejected]);\n\n  // Fetches new word and resets the used letters\n  const startNewGame = () => {\n    setUsedLetters([]);\n    fetchRandomWord();\n  };\n\n  // Starts the first game\n  const startFirstGame = () => {\n    setIsFirstGame(false);\n  };\n\n  // Initial game screen\n  if (isFirstGame) {\n    return (\n      <Layout>\n        <Modal\n          title={screens.start.title}\n          description={screens.start.description}\n          buttonText={screens.start.button}\n          onButtonClick={startFirstGame}\n        />\n        <Folk visiblePartsCount={11} />\n        <YouMissed missedLetters={screens.start.missedLetters} />\n        <LetterTiles\n          word={screens.start.word}\n          guessedLetters={screens.start.guessedLetters}\n        />\n      </Layout>\n    );\n  }\n\n  // When the word is too long, before new one is fetched use empty string\n  // to so that <LetterTile> is semi-transparent\n  // const word = randomWord.length > MAX_WORD_LENGTH ? '' : randomWord;\n\n  // After the initial game\n  return (\n    <Layout>\n      {/* Loading screen */}\n      {isPending && <Modal title={screens.loading.title} noButton />}\n\n      {/* Error screen */}\n      {isRejected && (\n        <Modal\n          title={screens.error.title}\n          description={screens.error.description}\n          noButton\n        />\n      )}\n\n      {/* Game over screen */}\n      {isResolved && isGameOver && (\n        <Modal\n          title={screens.gameLost.title}\n          buttonText={screens.gameLost.button}\n          onButtonClick={startNewGame}\n        />\n      )}\n\n      {/* Game won screen */}\n      {isResolved && isGameWon && (\n        <Modal\n          title={screens.gameWon.title}\n          buttonText={screens.gameWon.button}\n          description={screens.gameWon.description(missedLetters.length)}\n          onButtonClick={startNewGame}\n        />\n      )}\n\n      <Folk visiblePartsCount={missedLetters.length} />\n      <YouMissed missedLetters={missedLetters} />\n      <LetterTiles word={randomWord} guessedLetters={guessedLetters} />\n    </Layout>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\n\nimport { getRandomWord } from 'api/words';\n\ntype Status = 'idle' | 'pending' | 'resolved' | 'rejected';\n\nexport function useRandomWord() {\n  const [word, setWord] = React.useState('');\n  const [status, setStatus] = React.useState<Status>('idle');\n\n  // Fetches random world from WordsAPI\n  const fetchRandomWord = React.useCallback(async () => {\n    setStatus('pending');\n\n    try {\n      const fetchedWord = await getRandomWord();\n      setStatus('resolved');\n      setWord(fetchedWord.toUpperCase());\n    } catch (e) {\n      setStatus('rejected');\n\n      console.error(e);\n    }\n  }, []);\n\n  // Initial fetch\n  React.useEffect(() => {\n    fetchRandomWord();\n  }, [fetchRandomWord]);\n\n  return {\n    status,\n    fetchRandomWord,\n    randomWord: word,\n    isIdle: status === 'idle',\n    isPending: status === 'pending',\n    isResolved: status === 'resolved',\n    isRejected: status === 'rejected',\n  };\n}\n","import 'assets/fonts/fonts.scss';\nimport 'assets/sass/index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { isDevelopment, isMSWEnabled, project } from 'config';\n\nimport App from 'components/App/App';\n\nasync function main() {\n  // Conditionally enable Mock Service Worker\n  if (isDevelopment && isMSWEnabled) {\n    // Make sure that your url is rewriten to use / at the end of the pathname.\n    // https://mswjs.io/docs/getting-started/integrate/browser#using-homepage-property-in-packagejson\n    if (window.location.pathname === project.pathname) {\n      window.location.pathname = project.pathname + '/';\n      return;\n    }\n    const { worker } = require('./mocks/dev-worker');\n\n    await worker.start({\n      quiet: true,\n      serviceWorker: {\n        url: project.pathname + '/mockServiceWorker.js',\n      },\n    });\n  }\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n  );\n}\n\nmain();\n","import { wordsApi } from 'config';\nimport { rest } from 'msw';\n\nlet index = 0;\nexport const words = [\n  'lotr',\n  'ale',\n  'pozdro',\n  'aaaa',\n  'hello',\n  'primary',\n  'secondary',\n];\n\nexport const serverHandlers = [\n  rest.get(wordsApi.url, (req, res, ctx) => {\n    const query = req.url.searchParams;\n    const random = query.get('random');\n\n    if (random) {\n      /**\n       * On each request gets next word from the list. When no more words, starts from\n       * the beginning.\n       */\n      const word = words[index++ % words.length];\n\n      return res(\n        ctx.json({\n          word,\n        }),\n      );\n    }\n\n    return res(\n      ctx.status(400),\n      ctx.json({\n        message: 'Invalid request',\n      }),\n    );\n  }),\n];\n\nexport const getRandomWordMock = {\n  mockSuccess(word: string) {\n    return rest.get(wordsApi.url, (req, res, ctx) => {\n      return res(\n        ctx.json({\n          word,\n        }),\n      );\n    });\n  },\n  mockSuccesses(words: string[]) {\n    let index = 0;\n\n    return rest.get(wordsApi.url, (req, res, ctx) => {\n      const word = words[index++ % words.length];\n      return res(\n        ctx.json({\n          word,\n        }),\n      );\n    });\n  },\n  mockError() {\n    return rest.get(wordsApi.url, (req, res, ctx) => {\n      return res(ctx.status(400), ctx.json({ message: 'Error' }));\n    });\n  },\n};\n","import { serverHandlers } from 'mocks/server-handlers';\nimport { setupWorker } from 'msw';\n\n// SetupWorkerAPI - used when running in DEV env\n// Setup requests interception using the given serverHandlers.\nexport const worker = setupWorker(...serverHandlers);\n"],"sourceRoot":""}