{"version":3,"sources":["config/index.ts","api/words.ts","components/Folk/Folk.tsx","components/Layout/Layout.tsx","components/LetterTiles/LetterTile/LetterTile.tsx","components/LetterTiles/LetterTiles.tsx","constants/game.ts","components/Modal/Modal.tsx","components/YouMissed/YouMissed.tsx","components/App/App.tsx","hooks/use-random-word.ts","index.tsx"],"names":["getEnv","name","value","process","Error","config","rapidApi","key","host","isProd","env","isDev","isTest","url","prodApi","getRandomWord","fetch","method","headers","response","json","word","folkParts","FolkContainer","children","className","Folk","visiblePartsCount","visibleParts","slice","map","part","Layout","LetterTile","inactive","clsx","LetterTiles","guessedLetters","wordLetters","padStart","split","letter","i","includes","Modal","title","description","buttonText","onButtonClick","noButton","onClick","YouMissed","missedLetters","join","App","api","React","isFirstGame","setIsFirstGame","usedLetters","setUsedLetters","setWord","status","setStatus","fetchRandomWord","a","fetchedWord","toUpperCase","console","error","randomWord","isIdle","isPending","isResolved","isRejected","useRandomWord","filter","l","isGameOver","length","isGameWon","every","isLoading","isError","isSuccess","handleKeyDown","test","concat","window","addEventListener","removeEventListener","startNewGame","words","index","createDevApi","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d187bbb9.chunk.js","sourcesContent":["const getEnv = (name: string): string => {\n  const value = process.env[name];\n\n  if (!value) {\n    throw new Error(`Missing: process.env['${name}'].`);\n  }\n\n  return value;\n};\n\nconst env = process.env.NODE_ENV;\n\nconst config = {\n  rapidApi: {\n    key: getEnv('REACT_APP_RAPIDAPI_KEY'),\n    host: getEnv('REACT_APP_RAPIDAPI_HOST'),\n  },\n  isProd: env === 'production',\n  isDev: env === 'development',\n  isTest: env === 'test',\n};\n\nexport default config;\n","import config from '../config';\n\nconst url = `https://${config.rapidApi.host}/words/?random=true`;\n\nexport interface WordsApi {\n  getRandomWord(): Promise<string>;\n}\n\nconst prodApi: WordsApi = {\n  async getRandomWord() {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'x-rapidapi-key': config.rapidApi.key,\n        'x-rapidapi-host': config.rapidApi.host,\n      },\n    });\n    const { word } = await response.json();\n    if (typeof word === 'string') {\n      return word;\n    }\n    throw new Error(`☠️ There something's wrong with the \"word\"`);\n  },\n};\n\nfunction createDevApi(words: string[]): WordsApi {\n  let index = 0;\n  return {\n    /**\n     * On each call gets next word from the list. When no more words, starts from\n     * the beginning.\n     */\n    async getRandomWord() {\n      return words[index++ % words.length];\n    },\n  };\n}\n\nexport { prodApi, createDevApi };\n","import './Folk.scss';\n\nimport * as React from 'react';\n\n// Folk's parts are in the order that they are rendered\n// during the game.\nconst folkParts = [\n  'head',\n  'neck',\n  'corpus',\n  'arm arm--right',\n  'arm arm--left',\n  'hand hand--right',\n  'hand hand--left',\n  'leg leg--right',\n  'leg leg--left',\n  'foot foot--right',\n  'foot foot--left',\n];\n\ninterface FolkProps {\n  visiblePartsCount: number;\n}\n\nfunction Folk({ visiblePartsCount }: FolkProps) {\n  const visibleParts = folkParts.slice(0, visiblePartsCount);\n\n  return (\n    <FolkContainer>\n      <div className=\"folk\" data-testid=\"folk\">\n        {visibleParts.map(part => (\n          <div key={part} className={part} />\n        ))}\n      </div>\n    </FolkContainer>\n  );\n}\n\n/**\n * Wraps the folk and adds the bar so it's easier to position it\n */\nfunction FolkContainer({ children }: { children: React.ReactElement }) {\n  return (\n    <div className=\"folk-container\">\n      <div className=\"bar bar--horizontal\" />\n      <div className=\"bar bar--vertical\" />\n      {children}\n    </div>\n  );\n}\n\nexport default Folk;\n","import './Layout.scss';\n\nimport * as React from 'react';\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nfunction Layout({ children }: LayoutProps) {\n  return (\n    <div data-testid=\"layout\" className=\"layout\">\n      <div className=\"container\">{children}</div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import './LetterTile.scss';\n\nimport * as React from 'react';\nimport clsx from 'clsx';\n\ninterface LetterProps {\n  inactive?: boolean;\n  children: React.ReactNode;\n}\n\nfunction LetterTile({ inactive, children }: LetterProps) {\n  return (\n    <div\n      aria-label={inactive ? 'Inactive letter tile' : 'Active letter tile'}\n      data-testid=\"letter-tile\"\n      className={clsx('letter-tile', inactive && 'inactive')}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default LetterTile;\n","import './LetterTiles.scss';\n\nimport { MAX_WORD_LENGTH } from 'constants/game';\n\nimport LetterTile from './LetterTile';\n\ninterface LettersProps {\n  word: string;\n  guessedLetters: string[];\n}\n\nfunction LetterTiles({ word, guessedLetters }: LettersProps) {\n  const wordLetters = word\n    // Pad the word when its length is less than max length\n    .padStart(MAX_WORD_LENGTH)\n    .split('');\n\n  return (\n    <div className=\"letter-tiles\">\n      {wordLetters.map((letter, i) => (\n        <LetterTile key={i} inactive={letter === ' '}>\n          {guessedLetters.includes(letter) || letter === '-' ? letter : null}\n        </LetterTile>\n      ))}\n    </div>\n  );\n}\n\nexport default LetterTiles;\n","/**\n * How long the word can be. It determines how many letter tiles we're going to\n * show.\n */\nexport const MAX_WORD_LENGTH = 11;\n\n/**\n * After how many tries the game is lost (it's basically the number of\n * folk's parts.\n */\nexport const MAX_MISSED_LETTERS = 11;\n","import './Modal.scss';\n\ninterface CommonModalProps {\n  title: string;\n  description?: string;\n}\n\ntype ButtonModalProps =\n  | {\n      noButton?: never;\n      buttonText: string;\n      onButtonClick: () => void;\n    }\n  | {\n      noButton: true;\n      buttonText?: never;\n      onButtonClick?: never;\n    };\n\ntype ModalProps = CommonModalProps & ButtonModalProps;\n\nfunction Modal({\n  title,\n  description,\n  buttonText,\n  onButtonClick,\n  noButton,\n}: ModalProps) {\n  return (\n    <div className=\"modal\">\n      <h1 className=\"title\">{title}</h1>\n      {description && <p className=\"description\">{description}</p>}\n      {!noButton && (\n        <button className=\"button\" onClick={onButtonClick}>\n          {buttonText}\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport default Modal;\n","import './YouMissed.scss';\n\ninterface YouMissedProps {\n  missedLetters: string[];\n}\n\nfunction YouMissed({ missedLetters }: YouMissedProps) {\n  return (\n    <div className=\"you-missed\">\n      <div className=\"title\">You missed:</div>\n      <div className=\"missed-letters\">{missedLetters.join(' ')}</div>\n    </div>\n  );\n}\n\nexport default YouMissed;\n","import * as React from 'react';\n\nimport { WordsApi } from 'api/words';\nimport { MAX_MISSED_LETTERS, MAX_WORD_LENGTH } from 'constants/game';\nimport { useRandomWord } from 'hooks/use-random-word';\nimport Folk from 'components/Folk';\nimport Layout from 'components/Layout';\nimport LetterTiles from 'components/LetterTiles';\nimport Modal from 'components/Modal';\nimport YouMissed from 'components/YouMissed';\n\ninterface AppProps {\n  api: WordsApi;\n}\n\nfunction App({ api }: AppProps) {\n  const [isFirstGame, setIsFirstGame] = React.useState(true);\n  const [usedLetters, setUsedLetters] = React.useState<string[]>([]);\n  const { randomWord, status, fetchRandomWord } = useRandomWord(api);\n\n  const missedLetters = usedLetters.filter(l => !randomWord.includes(l));\n  const guessedLetters = usedLetters.filter(l => randomWord.includes(l));\n\n  // Game is lost when player user reached steps limit\n  const isGameOver = missedLetters.length === MAX_MISSED_LETTERS;\n\n  // Game is won when each letter of the random word can be found\n  // among the guessed letters\n  const isGameWon = randomWord.split('').every(l => guessedLetters.includes(l));\n\n  // Fetch status\n  const isLoading = status === 'pending';\n  const isError = status === 'rejected';\n  const isSuccess = status === 'resolved';\n\n  // Add/remove key down event listener\n  React.useEffect(() => {\n    const handleKeyDown = ({ key }: KeyboardEvent) => {\n      // Pressed key is not alphabetical\n      if (!/^[a-z]$/i.test(key)) {\n        return;\n      }\n\n      // Pressed key been used already\n      if (usedLetters.includes(key.toUpperCase())) {\n        return;\n      }\n\n      // One of the screens `initial`, `game-won`, `game-over`, `loading`,\n      // `error` is shown\n      if (isFirstGame || isGameWon || isGameOver || isLoading || isError) {\n        return;\n      }\n\n      setUsedLetters(usedLetters.concat(key.toUpperCase()));\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [usedLetters, isFirstGame, isGameWon, isGameOver, isLoading, isError]);\n\n  // When random word is too long fetches new one\n  React.useEffect(() => {\n    if (randomWord.length > MAX_WORD_LENGTH) {\n      fetchRandomWord();\n    }\n  }, [randomWord, fetchRandomWord]);\n\n  // Fetches new word and resets the used letters\n  const startNewGame = () => {\n    setUsedLetters([]);\n    fetchRandomWord();\n  };\n\n  // Starts the first game\n  const startFirstGame = () => {\n    setIsFirstGame(false);\n  };\n\n  // Initial game screen\n  if (isFirstGame) {\n    return (\n      <Layout>\n        <Modal\n          title=\"Netguru Hangman\"\n          description=\"This is a simple Hangman game, have fun and good luck!\"\n          buttonText=\"Start game\"\n          onButtonClick={startFirstGame}\n        />\n        <Folk visiblePartsCount={11} />\n        <YouMissed\n          missedLetters={['B', 'D', 'E', 'Z', 'P', 'U', 'K', 'L', 'Q', 'W']}\n        />\n        <LetterTiles word=\"HANGMAN\" guessedLetters={['H', 'A']} />\n      </Layout>\n    );\n  }\n\n  // When the word is too long, before new one is fetched use empty string\n  // to so that <LetterTile> is semi-transparent\n  const word = randomWord.length > MAX_WORD_LENGTH ? '' : randomWord;\n\n  // After the initial game\n  return (\n    <Layout>\n      {/* Loading screen */}\n      {isLoading && <Modal title=\"Loading...\" noButton />}\n\n      {/* Error screen */}\n      {isError && (\n        <Modal\n          title=\"Ooops :(\"\n          description=\"Something went wrong, try refreshing the page.\"\n          noButton\n        />\n      )}\n\n      {/* Game over screen */}\n      {isGameOver && isSuccess && (\n        <Modal\n          title=\"Game over\"\n          buttonText=\"New word\"\n          onButtonClick={startNewGame}\n        />\n      )}\n\n      {/* Game won screen */}\n      {isGameWon && isSuccess && (\n        <Modal\n          title=\"You won!\"\n          buttonText=\"Again\"\n          description={`Congratulations, you missed ${missedLetters.length} letters.`}\n          onButtonClick={startNewGame}\n        />\n      )}\n\n      <Folk visiblePartsCount={missedLetters.length} />\n      <YouMissed missedLetters={missedLetters} />\n      <LetterTiles word={word} guessedLetters={guessedLetters} />\n    </Layout>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\n\nimport { WordsApi } from '../api/words';\n\ntype Status = 'idle' | 'pending' | 'resolved' | 'rejected';\n\nexport function useRandomWord(api: WordsApi) {\n  const [word, setWord] = React.useState('');\n  const [status, setStatus] = React.useState<Status>('idle');\n\n  // Fetches random world from WordsAPI\n  const fetchRandomWord = React.useCallback(async () => {\n    setStatus('pending');\n\n    try {\n      const fetchedWord = await api.getRandomWord();\n      setStatus('resolved');\n      setWord(fetchedWord.toUpperCase());\n    } catch (e) {\n      setStatus('rejected');\n\n      console.error(e);\n    }\n  }, [api]);\n\n  // Initial fetch\n  React.useEffect(() => {\n    fetchRandomWord();\n  }, [fetchRandomWord]);\n\n  return {\n    status,\n    fetchRandomWord,\n    randomWord: word,\n    isIdle: status === 'idle',\n    isPending: status === 'pending',\n    isResolved: status === 'resolved',\n    isRejected: status === 'rejected',\n  };\n}\n","import 'fonts/fonts.scss';\nimport 'index.scss';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createDevApi, prodApi } from 'api/words';\n\nimport App from './components/App/App';\nimport config from './config';\n\nconst api = config.isProd\n  ? prodApi\n  : createDevApi(['maciek', 'a', 'word', 'test']);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App api={api} />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}